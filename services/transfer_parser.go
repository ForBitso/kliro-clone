package services

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"kliro/models"
	"log"
	"net/http"
	"os"
	"regexp"
	"strings"
	"time"

	"github.com/PuerkitoBio/goquery"
)

type TransferParser struct{}

func NewTransferParser() *TransferParser {
	return &TransferParser{}
}

func (tp *TransferParser) ParseURL(url string) ([]*models.Transfer, error) {
	log.Printf("[TRANSFER PARSER] üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ URL: %s", url)

	// –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	log.Printf("[TRANSFER PARSER] üåê –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
	resp, err := http.Get(url)
	if err != nil {
		log.Printf("[TRANSFER PARSER] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: %v", err)
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: %v", err)
	}
	defer resp.Body.Close()

	log.Printf("[TRANSFER PARSER] üì° –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã: %d", resp.StatusCode)

	doc, err := goquery.NewDocumentFromReader(resp.Body)
	if err != nil {
		log.Printf("[TRANSFER PARSER] ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML: %v", err)
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML: %v", err)
	}

	// –ë–µ—Ä–µ–º –í–ï–°–¨ —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	text := doc.Find("body").Text()
	log.Printf("[TRANSFER PARSER] üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: %d —Å–∏–º–≤–æ–ª–æ–≤", len(text))

	// –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–µ–≥–æ
	text = tp.cleanText(text)

	log.Printf("[TRANSFER PARSER] –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è %s (–ø–µ—Ä–≤—ã–µ 5000 —Å–∏–º–≤–æ–ª–æ–≤):", url)
	log.Printf(text[:min(len(text), 5000)])
	log.Printf("[TRANSFER PARSER] üìè –û–±—â–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: %d —Å–∏–º–≤–æ–ª–æ–≤", len(text))

	// –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è DeepSeek
	prompt := fmt.Sprintf(`–ò–∑–≤–ª–µ–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –í–°–ï–• –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –≤–µ—Ä–Ω–∏ JSON-–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤.

–ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
app_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
commission: –∫–æ–º–∏—Å—Å–∏—è –∑–∞ –ø–µ—Ä–µ–≤–æ–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "0%%", "0.5%%", "1%%")
limit_ru: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–º–∏—Ç–∞—Ö –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (null –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)
limit_uz: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–º–∏—Ç–∞—Ö –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º —è–∑—ã–∫–µ –Ω—É–∂–Ω–æ –≤–∑—è—Ç—å –∏–∑ —Ä—É—Å–∫–æ–≥–æ –∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ —É–∑–±–µ–∫—Å–∫–∏–π (null –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ )

–ï—Å–ª–∏ –ª–∏–º–∏—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ —Ç–µ–∫—Å—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–π null –≤–º–µ—Å—Ç–æ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏.

–ù–∞–π–¥–∏ –í–°–ï –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ. –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π –Ω–∏—á–µ–≥–æ.

–¢–µ–∫—Å—Ç: "%s"
–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON-–º–∞—Å—Å–∏–≤.`, text)

	// –í—ã–∑—ã–≤–∞–µ–º DeepSeek API
	reqBody := DeepSeekRequest{
		Model:       "deepseek-chat",
		Messages:    []Message{{Role: "user", Content: prompt}},
		MaxTokens:   8192,
		Temperature: 0.0,
	}

	jsonBody, _ := json.Marshal(reqBody)
	req, _ := http.NewRequest("POST", "https://api.deepseek.com/v1/chat/completions", bytes.NewBuffer(jsonBody))
	req.Header.Set("Content-Type", "application/json")

	apiKey := os.Getenv("DEEPSEEK_API_KEY")
	if apiKey == "" {
		log.Printf("[TRANSFER PARSER] ‚ùå DEEPSEEK_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
		return nil, fmt.Errorf("DeepSeek API key not set")
	}
	log.Printf("[TRANSFER PARSER] ‚úÖ DEEPSEEK_API_KEY –Ω–∞–π–¥–µ–Ω (–¥–ª–∏–Ω–∞: %d)", len(apiKey))

	req.Header.Set("Authorization", "Bearer "+apiKey)

	log.Printf("[TRANSFER PARSER] üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ DeepSeek API...")
	client := &http.Client{}
	dsResp, err := client.Do(req)
	if err != nil {
		log.Printf("[TRANSFER PARSER] ‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ DeepSeek: %v", err)
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ DeepSeek API: %v", err)
	}
	defer dsResp.Body.Close()

	log.Printf("[TRANSFER PARSER] üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ DeepSeek: %d", dsResp.StatusCode)

	body, _ := ioutil.ReadAll(dsResp.Body)
	log.Printf("[TRANSFER PARSER] üìÑ –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ DeepSeek: %d –±–∞–π—Ç", len(body))

	if dsResp.StatusCode != 200 {
		log.Printf("[TRANSFER PARSER] ‚ùå –û—à–∏–±–∫–∞ DeepSeek API (—Å—Ç–∞—Ç—É—Å %d): %s", dsResp.StatusCode, string(body))
		return nil, fmt.Errorf("DeepSeek API error (status %d): %s", dsResp.StatusCode, string(body))
	}

	var deepSeekResponse DeepSeekResponse
	if err := json.Unmarshal(body, &deepSeekResponse); err != nil {
		log.Printf("[TRANSFER PARSER] ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞ DeepSeek: %v", err)
		log.Printf("[TRANSFER PARSER] üìÑ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: %s", string(body))
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ DeepSeek: %v", err)
	}

	log.Printf("[TRANSFER PARSER] üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ choices –≤ –æ—Ç–≤–µ—Ç–µ: %d", len(deepSeekResponse.Choices))

	if len(deepSeekResponse.Choices) > 0 {
		raw := deepSeekResponse.Choices[0].Message.Content
		raw = strings.TrimSpace(raw)
		raw = strings.TrimPrefix(raw, "```json")
		raw = strings.TrimPrefix(raw, "```")
		raw = strings.TrimSuffix(raw, "```")
		raw = strings.TrimSpace(raw)

		log.Printf("[TRANSFER PARSER] DeepSeek –æ—Ç–≤–µ—Ç –¥–ª—è %s: %s", url, raw)
		log.Printf("[TRANSFER PARSER] üìÑ –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ DeepSeek: %d —Å–∏–º–≤–æ–ª–æ–≤", len(raw))

		var parsedTransfers []*models.Transfer
		if err := json.Unmarshal([]byte(raw), &parsedTransfers); err != nil {
			log.Printf("[TRANSFER PARSER ERROR] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è %s: %v, raw: %s", url, err, raw)
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
		}

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
		for i, transfer := range parsedTransfers {
			transfer.CreatedAt = time.Now()
			log.Printf("[TRANSFER PARSER] üìù –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ %d: %s (–∫–æ–º–∏—Å—Å–∏—è: %s)", i+1, transfer.AppName, transfer.Commission)
		}

		// –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —É–ª—É—á—à–∞–µ–º –¥–∞–Ω–Ω—ã–µ
		uniqueTransfers := tp.removeDuplicatesAndImprove(parsedTransfers)

		log.Printf("[TRANSFER PARSER] ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–∏–ª–∏ %d –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: %d", len(parsedTransfers), len(uniqueTransfers))

		return uniqueTransfers, nil
	}

	return nil, fmt.Errorf("–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç DeepSeek")
}

func (tp *TransferParser) cleanText(raw string) string {
	// –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
	reTag := regexp.MustCompile(`<[^>]+>`)
	clean := reTag.ReplaceAllString(raw, "")

	// –£–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏ —Å—Ç–∏–ª–∏
	reScript := regexp.MustCompile(`<script[^>]*>.*?</script>`)
	reStyle := regexp.MustCompile(`<style[^>]*>.*?</style>`)
	clean = reScript.ReplaceAllString(clean, "")
	clean = reStyle.ReplaceAllString(clean, "")

	// –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
	reSpaces := regexp.MustCompile(`\s+`)
	clean = reSpaces.ReplaceAllString(clean, " ")
	clean = strings.TrimSpace(clean)

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
	if len(clean) > 20000 {
		clean = clean[:20000]
	}

	return clean
}

// removeDuplicatesAndImprove —É–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —É–ª—É—á—à–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ
func (tp *TransferParser) removeDuplicatesAndImprove(transfers []*models.Transfer) []*models.Transfer {
	seen := make(map[string]bool)
	var uniqueTransfers []*models.Transfer

	for _, transfer := range transfers {
		// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
		normalizedName := tp.normalizeAppName(transfer.AppName)

		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
		if seen[normalizedName] {
			log.Printf("[TRANSFER PARSER] üîÑ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç: %s", transfer.AppName)
			continue
		}

		// –£–ª—É—á—à–∞–µ–º –¥–∞–Ω–Ω—ã–µ
		tp.improveTransferData(transfer)

		// –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		uniqueTransfers = append(uniqueTransfers, transfer)
		seen[normalizedName] = true
	}

	return uniqueTransfers
}

// normalizeAppName –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
func (tp *TransferParser) normalizeAppName(name string) string {
	// –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
	normalized := strings.ToLower(strings.TrimSpace(name))

	// –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
	normalized = strings.Join(strings.Fields(normalized), " ")

	// –£–±–∏—Ä–∞–µ–º –æ–±—â–∏–µ —Å—É—Ñ—Ñ–∏–∫—Å—ã
	normalized = strings.TrimSuffix(normalized, " mobile")
	normalized = strings.TrimSuffix(normalized, " bank")
	normalized = strings.TrimSuffix(normalized, " pay")

	return normalized
}

// improveTransferData —É–ª—É—á—à–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥–∞
func (tp *TransferParser) improveTransferData(transfer *models.Transfer) {
	// –£–ª—É—á—à–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
	if transfer.Commission == "–ù–µ —É–∫–∞–∑–∞–Ω–æ" || transfer.Commission == "" {
		transfer.Commission = "0%"
	}

	// –£–ª—É—á—à–∞–µ–º –ª–∏–º–∏—Ç—ã
	if transfer.LimitRU == nil || *transfer.LimitRU == "–ù–µ —É–∫–∞–∑–∞–Ω–æ" || *transfer.LimitRU == "" {
		limitRU := "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–º–∏—Ç–∞—Ö –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
		transfer.LimitRU = &limitRU
	}

	if transfer.LimitUZ == nil || *transfer.LimitUZ == "–ù–µ —É–∫–∞–∑–∞–Ω–æ" || *transfer.LimitUZ == "" {
		limitUZ := "Limit haqida ma'lumot ko'rsatilmagan"
		transfer.LimitUZ = &limitUZ
	}

	// –£–ª—É—á—à–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	transfer.AppName = tp.cleanAppName(transfer.AppName)
}

// cleanAppName –æ—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
func (tp *TransferParser) cleanAppName(name string) string {
	// –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
	cleaned := strings.TrimSpace(name)

	// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
	nameMap := map[string]string{
		"Anorbank":    "Anor Bank",
		"Asakabank":   "Asaka Bank",
		"Hamkorbank":  "Hamkor Bank",
		"Ipotekabank": "Ipoteka Bank",
		"Milliybank":  "Milliy Bank",
		"Sqbbank":     "SQB Bank",
		"Turonbank":   "Turon Bank",
		"Xalqbank":    "Xalq Bank",
		"Agrobank":    "Agro Bank",
		"Aloqabank":   "Aloqa Bank",
	}

	if corrected, exists := nameMap[cleaned]; exists {
		return corrected
	}

	return cleaned
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}
