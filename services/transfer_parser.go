package services

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"kliro/models"
	"log"
	"net/http"
	"os"
	"regexp"
	"strings"
	"time"

	"github.com/PuerkitoBio/goquery"
)

type TransferParser struct{}

func NewTransferParser() *TransferParser {
	return &TransferParser{}
}

func (tp *TransferParser) ParseURL(url string) ([]*models.Transfer, error) {
	// –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	resp, err := http.Get(url)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: %v", err)
	}
	defer resp.Body.Close()

	doc, err := goquery.NewDocumentFromReader(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML: %v", err)
	}

	// –£–¥–∞–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é, —Ñ—É—Ç–µ—Ä –∏ –ø—Ä–æ—á–∏–µ –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –±–ª–æ–∫–∏
	doc.Find("nav, header, footer, .navbar, .menu, .sidebar, .breadcrumbs, .topbar, .language, .lang-switcher, .mobile-menu, .contact-info").Remove()

	// –£–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏ —Å—Ç–∏–ª–∏
	doc.Find("script, style").Remove()

	// –ü—ã—Ç–∞–µ–º—Å—è –≤—ã—Ç–∞—â–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –±–ª–æ–∫–∏ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
	var relevantText []string
	doc.Find("section, div, p, span, li, td").Each(func(i int, s *goquery.Selection) {
		txt := strings.ToLower(s.Text())
		if strings.Contains(txt, "–∫–æ–º–∏—Å—Å–∏—è") || strings.Contains(txt, "–ª–∏–º–∏—Ç") || strings.Contains(txt, "–ø–µ—Ä–µ–≤–æ–¥") || strings.Contains(txt, "%") || strings.Contains(txt, "–º–ª–Ω") || strings.Contains(txt, "—Å—É–º") {
			relevantText = append(relevantText, s.Text())
		}
	})

	var text string
	if len(relevantText) > 0 {
		text = strings.Join(relevantText, " ")
	} else {
		text = doc.Find("body").Text()
	}

	text = tp.cleanText(text)

	log.Printf("[TRANSFER PARSER] –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è %s (–ø–µ—Ä–≤—ã–µ 3000 —Å–∏–º–≤–æ–ª–æ–≤):", url)
	log.Printf(text[:min(len(text), 3000)])
	log.Printf("[TRANSFER PARSER] üìè –û–±—â–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: %d —Å–∏–º–≤–æ–ª–æ–≤", len(text))

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º DeepSeek –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –í–°–ï–• –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
	prompt := fmt.Sprintf(`–ò–∑–≤–ª–µ–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –í–°–ï–• –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –≤–µ—Ä–Ω–∏ JSON-–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 30-50 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤. –¢—ã –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –í–°–ï –∏–∑ –Ω–∏—Ö!

–ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
app_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Davr Mobile", "Paynet", "xazna", "Mavrid", "Milliy", "SQB Mobile", "Anorbank", "Smartbank", "Oq", "Hamkor", "Humans", "My Uztelecom", "Uzum Bank", "AVO", "TBC UZ", "Payme", "Click Up", "Paylov", "A-Pay", "Limon Pay", "Uzum", "TBC", "Humo", "UzCard", "Visa", "Mastercard", "Click", "Payme", "Uzum Bank", "TBC Bank", "Anor Bank", "Hamkor Bank", "SQB Bank", "Milliy Bank", "Ipoteka Bank", "Turon Bank", "Aloqa Bank", "Xalq Bank", "Agro Bank", "Asaka Bank", "NBU", "CBU" –∏ —Ç.–¥.)
commission: –∫–æ–º–∏—Å—Å–∏—è –∑–∞ –ø–µ—Ä–µ–≤–æ–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "0%%", "0.5%%", "1%%", "0.7%%" –∏ —Ç.–¥.)
limit_ru: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–º–∏—Ç–∞—Ö –∏ —É—Å–ª–æ–≤–∏—è—Ö –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ï–∂–µ–º–µ—Å—è—á–Ω–æ –∑–∞ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–æ 5 –º–ª–Ω —Å—É–º –∫–æ–º–∏—Å—Å–∏—è 0%%, –∑–∞—Ç–µ–º 0.5%%", "–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –ø–µ—Ä–µ–≤–æ–¥—ã —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 0%% –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞ 5 –º–ª–Ω –≤ –º–µ—Å—è—Ü, –¥–∞–ª–µ–µ 0.5%%" –∏ —Ç.–¥.)
limit_uz: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–º–∏—Ç–∞—Ö –∏ —É—Å–ª–æ–≤–∏—è—Ö –ù–ê –£–ó–ë–ï–ö–°–ö–û–ú –Ø–ó–´–ö–ï (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Har oy 5 mln so'mgacha o'tkazmalar uchun komissiya 0%%, keyin 0.5%%", "O'tkazmalar uchun komissiya oylik 5 mln so'm limit doirasida 0%%, keyin 0.5%%" –∏ —Ç.–¥.)

–ò–ù–°–¢–†–£–ö–¶–ò–ò:
1. –ù–∞–π–¥–∏ –í–°–ï –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 30-50 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π)
2. –ò—â–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –±–∞–Ω–∫–æ–≤, –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º, –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
3. –ò–∑–≤–ª–µ–∫–∞–π –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —Å —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö, —Ç–∞–∫ –∏ —Å —É–∑–±–µ–∫–æ—è–∑—ã—á–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
4. –ï—Å–ª–∏ –∫–∞–∫–æ–µ-—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî —É–∫–∞–∂–∏ "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
5. –ö–∞–∂–¥–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º –≤ –º–∞—Å—Å–∏–≤–µ
6. –ù–ï –ü–†–û–ü–£–°–ö–ê–ô –ù–ò –û–î–ù–û–ì–û –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø!
7. –í–ê–ñ–ù–û: limit_ru –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, limit_uz –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º —è–∑—ã–∫–µ

–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:
–∫–æ–º–∏—Å—Å–∏—è ‚Äî commission
–ª–∏–º–∏—Ç ‚Äî limit
–ø–µ—Ä–µ–≤–æ–¥ ‚Äî transfer
–º–ª–Ω ‚Äî million
—Å—É–º ‚Äî sum
–º–µ—Å—è—Ü ‚Äî month
–≥–æ–¥ ‚Äî year

–¢–µ–∫—Å—Ç: "%s"
–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON-–º–∞—Å—Å–∏–≤. –ë–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.`, text)

	// –í—ã–∑—ã–≤–∞–µ–º DeepSeek API
	reqBody := DeepSeekRequest{
		Model:       "deepseek-chat",
		Messages:    []Message{{Role: "user", Content: prompt}},
		MaxTokens:   8192,
		Temperature: 0.0,
	}

	jsonBody, _ := json.Marshal(reqBody)
	req, _ := http.NewRequest("POST", DEEPSEEK_API_URL, bytes.NewBuffer(jsonBody))
	req.Header.Set("Content-Type", "application/json")

	apiKey := os.Getenv("DEEPSEEK_API_KEY")
	if apiKey == "" {
		return nil, fmt.Errorf("DeepSeek API key not set")
	}
	req.Header.Set("Authorization", "Bearer "+apiKey)

	client := &http.Client{}
	dsResp, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ DeepSeek API: %v", err)
	}
	defer dsResp.Body.Close()

	body, _ := ioutil.ReadAll(dsResp.Body)
	var deepSeekResponse DeepSeekResponse
	if err := json.Unmarshal(body, &deepSeekResponse); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ DeepSeek: %v", err)
	}

	if len(deepSeekResponse.Choices) > 0 {
		raw := deepSeekResponse.Choices[0].Message.Content
		raw = strings.TrimSpace(raw)
		raw = strings.TrimPrefix(raw, "```json")
		raw = strings.TrimPrefix(raw, "```")
		raw = strings.TrimSuffix(raw, "```")
		raw = strings.TrimSpace(raw)

		log.Printf("[TRANSFER PARSER] DeepSeek –æ—Ç–≤–µ—Ç –¥–ª—è %s: %s", url, raw)
		log.Printf("[TRANSFER PARSER] üìÑ –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ DeepSeek: %d —Å–∏–º–≤–æ–ª–æ–≤", len(raw))

		var parsedTransfers []*models.Transfer
		if err := json.Unmarshal([]byte(raw), &parsedTransfers); err != nil {
			log.Printf("[TRANSFER PARSER ERROR] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è %s: %v, raw: %s", url, err, raw)
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
		}

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
		for i, transfer := range parsedTransfers {
			transfer.CreatedAt = time.Now()
			log.Printf("[TRANSFER PARSER] üìù –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ %d: %s (–∫–æ–º–∏—Å—Å–∏—è: %s)", i+1, transfer.AppName, transfer.Commission)
		}

		log.Printf("[TRANSFER PARSER] ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–∏–ª–∏ %d –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è %s", len(parsedTransfers), url)

		return parsedTransfers, nil
	}

	return nil, fmt.Errorf("–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç DeepSeek")
}

func (tp *TransferParser) cleanText(raw string) string {
	// –£–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏ —Å—Ç–∏–ª–∏
	reScript := regexp.MustCompile(`<script[^>]*>.*?</script>`)
	reStyle := regexp.MustCompile(`<style[^>]*>.*?</style>`)
	reLink := regexp.MustCompile(`https?://\S+|ftp://\S+|mailto:\S+`)
	reTag := regexp.MustCompile(`<[^>]+>`)
	reSpaces := regexp.MustCompile(`\s+`)
	reJS := regexp.MustCompile(`javascript:`)
	reConsole := regexp.MustCompile(`console\.(log|error|warn|info)\([^)]*\)`)
	reFunction := regexp.MustCompile(`function\s+\w+\s*\([^)]*\)\s*\{[^}]*\}`)

	// –£–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏ —Å—Ç–∏–ª–∏
	clean := reScript.ReplaceAllString(raw, "")
	clean = reStyle.ReplaceAllString(clean, "")

	// –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫–∏
	clean = reLink.ReplaceAllString(clean, "")

	// –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
	clean = reTag.ReplaceAllString(clean, "")

	// –£–¥–∞–ª—è–µ–º JavaScript –∫–æ–¥
	clean = reJS.ReplaceAllString(clean, "")
	clean = reConsole.ReplaceAllString(clean, "")
	clean = reFunction.ReplaceAllString(clean, "")

	lines := strings.Split(clean, "\n")
	var compact []string
	for _, line := range lines {
		line = strings.TrimSpace(line)
		if line != "" && len(line) > 2 {
			compact = append(compact, line)
		}
	}

	clean = strings.Join(compact, " ")
	clean = reSpaces.ReplaceAllString(clean, " ")
	clean = strings.TrimSpace(clean)

	if len(clean) > 10000 {
		clean = clean[:10000]
	}
	return clean
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}
