package services

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"kliro/models"
	"log"
	"net/http"
	"os"
	"regexp"
	"strings"
	"time"

	"github.com/PuerkitoBio/goquery"
)

const DEEPSEEK_API_URL = "https://api.deepseek.com/v1/chat/completions"

type AutocreditParser struct{}

func NewAutocreditParser() *AutocreditParser {
	return &AutocreditParser{}
}

func (ap *AutocreditParser) ParseURL(url string) (*models.Autocredit, error) {
	// –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	resp, err := http.Get(url)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: %v", err)
	}
	defer resp.Body.Close()

	doc, err := goquery.NewDocumentFromReader(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML: %v", err)
	}

	// –£–¥–∞–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é, —Ñ—É—Ç–µ—Ä –∏ –ø—Ä–æ—á–∏–µ –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –±–ª–æ–∫–∏
	doc.Find("nav, header, footer, .navbar, .menu, .sidebar, .breadcrumbs, .topbar, .language, .lang-switcher, .mobile-menu, .contact-info").Remove()

	// –£–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏ —Å—Ç–∏–ª–∏
	doc.Find("script, style").Remove()

	// –ü—ã—Ç–∞–µ–º—Å—è –≤—ã—Ç–∞—â–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –±–ª–æ–∫–∏ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
	var relevantText []string
	doc.Find("section, div, p, span, li, td").Each(func(i int, s *goquery.Selection) {
		txt := strings.ToLower(s.Text())
		if strings.Contains(txt, "–∞–≤—Ç–æ") || strings.Contains(txt, "–º–∞—à–∏–Ω–∞") || strings.Contains(txt, "–∞–≤—Ç–æ–º–æ–±–∏–ª—å") || strings.Contains(txt, "oy") || strings.Contains(txt, "foiz") || strings.Contains(txt, "so'm") || strings.Contains(txt, "%") || strings.Contains(txt, "–ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π") || strings.Contains(txt, "–≤–∑–Ω–æ—Å") || strings.Contains(txt, "–∫—Ä–µ–¥–∏—Ç") || strings.Contains(txt, "—Å—Ç–∞–≤–∫–∞") || strings.Contains(txt, "—Å—Ä–æ–∫") {
			relevantText = append(relevantText, s.Text())
		}
	})

	var text string
	if len(relevantText) > 0 {
		text = strings.Join(relevantText, " ")
	} else {
		text = doc.Find("body").Text()
	}

	text = ap.cleanText(text)

	// –õ–æ–≥–∏—Ä—É–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	if len(text) > 2000 {
		log.Printf("[AUTOCREDIT PARSER] –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è %s (–ø–µ—Ä–≤—ã–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤): %s", url, text[:2000])
	} else {
		log.Printf("[AUTOCREDIT PARSER] –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è %s: %s", url, text)
	}

	prompt := fmt.Sprintf(`
	–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤. –ò–∑–≤–ª–µ–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–∞–Ω–Ω—ã–µ –∏ –≤–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ –æ–¥–∏–Ω JSON —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:
	
	{
	  "bank_name": string|null,               // –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞, –∏–∑–≤–ª–µ–∫–∏ –∏–∑ URL (–Ω–∞–ø—Ä–∏–º–µ—Ä, "hamkorbank.uz" ‚Üí "hamkorbank", "xb.uz" ‚Üí "xb"). –ï—Å–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ ‚Äî null
	  "url": string,                          // –ò—Å—Ö–æ–¥–Ω—ã–π URL
	  "rate": number,                         // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö). –ü—Ä–∏–º–µ—Ä—ã: "–æ—Ç 24.9" ‚Üí 24.9, "–¥–æ 28" ‚Üí 28, "24" ‚Üí 24. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî 0
	  "initial_payment": number,             // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö. –ü—Ä–∏–º–µ—Ä—ã: "–æ—Ç 25" ‚Üí 25, "25" ‚Üí 25. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî 0
	  "term_months": number,                 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ –≤ –º–µ—Å—è—Ü–∞—Ö. –ü—Ä–∏–º–µ—Ä—ã: "–¥–æ 5 –ª–µ—Ç" ‚Üí 60, "48 –º–µ—Å—è—Ü–µ–≤" ‚Üí 48, "4 –≥–æ–¥–∞" ‚Üí 48. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî 0
	  "max_amount": string|number|null       // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞:
											 // - –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ "–¥–æ 600 –º–ª–Ω —Å—É–º" ‚Üí 600000000
											 // - –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ "–¥–æ 2000 –ë–†–í" ‚Üí "2000 BRV"
											 // - –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ "3x –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã", "–ú–†–ó–ü", "–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞", "minimal wage" ‚Üí "3x –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞" –∏ —Ç.–¥.
											 // - –ï—Å–ª–∏ "–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ", "VIP", "—á–µ–∫–ª–∞–Ω–º–∞–≥–∞–Ω" ‚Üí "VIP"
											 // - –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ ‚Äî null
	}
	
	üìå –£—á–∏—Ç—ã–≤–∞–π –æ–±–µ —è–∑—ã–∫–æ–≤—ã–µ –≤–µ—Ä—Å–∏–∏: —Ä—É—Å—Å–∫–∏–π –∏ —É–∑–±–µ–∫—Å–∫–∏–π.
	üìå –ò–∑–≤–ª–µ–∫–∞–π —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç ‚Äî –∏—â–∏ —Å–ª–æ–≤–∞: –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç, –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç, avtokredit, avtomobil, mashina, bosh to'lov, foiz, oy muddati –∏ —Ç.–¥.
	
	–ü—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑ –¥–ª—è max_amount:
	- ‚Äú–¥–æ 2000 –ë–†–í‚Äù ‚Üí "2000 BRV"
	- ‚Äú–¥–æ 3 –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∑–∞—Ä–ø–ª–∞—Ç‚Äù ‚Üí "3x –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞"
	- ‚Äú–¥–æ 600 –º–ª–Ω —Å—É–º‚Äù ‚Üí 600000000
	- ‚Äú–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π‚Äù, ‚Äú–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ‚Äù, ‚ÄúVIP‚Äù, ‚Äú—á–µ–∫–ª–∞–Ω–º–∞–≥–∞–Ω‚Äù ‚Üí "VIP"
	
	–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è bank_name:
	- "https://www.infinbank.com/ru/private/credits/avto_credit/" ‚Üí "infinbank"
	- "https://xb.uz/page/tezkor-avtokredit" ‚Üí "xb"
	
	TEXT: """%s"""
	URL: "%s"
	
	–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON. –ë–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –¥–æ –∏ –ø–æ—Å–ª–µ.
	`, text, url)

	// –í—ã–∑—ã–≤–∞–µ–º DeepSeek API
	reqBody := DeepSeekRequest{
		Model:       "deepseek-chat",
		Messages:    []Message{{Role: "user", Content: prompt}},
		MaxTokens:   256,
		Temperature: 0.0,
	}

	jsonBody, _ := json.Marshal(reqBody)
	req, _ := http.NewRequest("POST", DEEPSEEK_API_URL, bytes.NewBuffer(jsonBody))
	req.Header.Set("Content-Type", "application/json")

	apiKey := os.Getenv("DEEPSEEK_API_KEY")
	if apiKey == "" {
		return nil, fmt.Errorf("DeepSeek API key not set")
	}
	req.Header.Set("Authorization", "Bearer "+apiKey)

	client := &http.Client{}
	dsResp, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ DeepSeek API: %v", err)
	}
	defer dsResp.Body.Close()

	body, _ := ioutil.ReadAll(dsResp.Body)
	var deepSeekResponse DeepSeekResponse
	if err := json.Unmarshal(body, &deepSeekResponse); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ DeepSeek: %v", err)
	}

	if len(deepSeekResponse.Choices) > 0 {
		raw := deepSeekResponse.Choices[0].Message.Content
		raw = strings.TrimSpace(raw)
		raw = strings.TrimPrefix(raw, "```json")
		raw = strings.TrimPrefix(raw, "```")
		raw = strings.TrimSuffix(raw, "```")
		raw = strings.TrimSpace(raw)

		log.Printf("[AUTOCREDIT PARSER] DeepSeek –æ—Ç–≤–µ—Ç –¥–ª—è %s: %s", url, raw)

		// –°–Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–º –≤ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
		var tempResponse struct {
			BankName       string      `json:"bank_name"`
			URL            string      `json:"url"`
			Rate           float64     `json:"rate"`
			InitialPayment float64     `json:"initial_payment"`
			TermMonths     int         `json:"term_months"`
			MaxAmount      interface{} `json:"max_amount"`
		}

		if err := json.Unmarshal([]byte(raw), &tempResponse); err != nil {
			log.Printf("[AUTOCREDIT PARSER ERROR] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è %s: %v, raw: %s", url, err, raw)
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
		}

		// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º max_amount –≤ —Å—Ç—Ä–æ–∫—É
		var maxAmountStr string
		switch v := tempResponse.MaxAmount.(type) {
		case string:
			maxAmountStr = v
		case float64:
			if v == 0 {
				maxAmountStr = "VIP"
			} else {
				maxAmountStr = fmt.Sprintf("%.0f", v)
			}
		case int:
			if v == 0 {
				maxAmountStr = "VIP"
			} else {
				maxAmountStr = fmt.Sprintf("%d", v)
			}
		default:
			maxAmountStr = "VIP"
		}

		// –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
		parsedCredit := models.Autocredit{
			BankName:       tempResponse.BankName,
			URL:            tempResponse.URL,
			Rate:           tempResponse.Rate,
			InitialPayment: tempResponse.InitialPayment,
			TermMonths:     tempResponse.TermMonths,
			MaxAmount:      maxAmountStr,
			CreatedAt:      time.Now(),
		}

		log.Printf("[AUTOCREDIT PARSER] –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–∏–ª–∏ –¥–ª—è %s: bank=%s, rate=%.2f, initial_payment=%.2f, term=%d, max_amount=%s",
			url, parsedCredit.BankName, parsedCredit.Rate, parsedCredit.InitialPayment, parsedCredit.TermMonths, parsedCredit.MaxAmount)

		return &parsedCredit, nil
	}

	return nil, fmt.Errorf("–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç DeepSeek")
}

func (ap *AutocreditParser) cleanText(raw string) string {
	// –£–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏ —Å—Ç–∏–ª–∏
	reScript := regexp.MustCompile(`<script[^>]*>.*?</script>`)
	reStyle := regexp.MustCompile(`<style[^>]*>.*?</style>`)
	reLink := regexp.MustCompile(`https?://\S+|ftp://\S+|mailto:\S+`)
	reTag := regexp.MustCompile(`<[^>]+>`)
	reSpaces := regexp.MustCompile(`\s+`)
	reJS := regexp.MustCompile(`javascript:`)
	reConsole := regexp.MustCompile(`console\.(log|error|warn|info)\([^)]*\)`)
	reFunction := regexp.MustCompile(`function\s+\w+\s*\([^)]*\)\s*\{[^}]*\}`)

	// –£–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏ —Å—Ç–∏–ª–∏
	clean := reScript.ReplaceAllString(raw, "")
	clean = reStyle.ReplaceAllString(clean, "")

	// –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫–∏
	clean = reLink.ReplaceAllString(clean, "")

	// –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
	clean = reTag.ReplaceAllString(clean, "")

	// –£–¥–∞–ª—è–µ–º JavaScript –∫–æ–¥
	clean = reJS.ReplaceAllString(clean, "")
	clean = reConsole.ReplaceAllString(clean, "")
	clean = reFunction.ReplaceAllString(clean, "")

	lines := strings.Split(clean, "\n")
	var compact []string
	for _, line := range lines {
		line = strings.TrimSpace(line)
		if line != "" && len(line) > 2 {
			compact = append(compact, line)
		}
	}

	clean = strings.Join(compact, " ")
	clean = reSpaces.ReplaceAllString(clean, " ")
	clean = strings.TrimSpace(clean)

	if len(clean) > 5000 {
		clean = clean[:5000]
	}
	return clean
}
