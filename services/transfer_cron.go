package services

import (
	"kliro/models"
	"log"

	"github.com/robfig/cron/v3"
	"gorm.io/gorm"
)

type TransferCronService struct {
	db *gorm.DB
}

func NewTransferCronService(db *gorm.DB) *TransferCronService {
	return &TransferCronService{db: db}
}

// StartTransferCron –∑–∞–ø—É—Å–∫–∞–µ—Ç cron –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
func StartTransferCron(db *gorm.DB) {
	service := NewTransferCronService(db)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
	service.initializeTransferData()

	// –°–æ–∑–¥–∞–µ–º cron –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
	c := cron.New(cron.WithSeconds())

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
	c.AddFunc("0 0 9 * * *", func() {
		log.Println("[TRANSFER CRON] –ù–∞—á–∏–Ω–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–µ–≤–æ–¥–æ–≤...")
		service.parseAllTransferURLs()
	})

	c.Start()
	log.Println("[TRANSFER CRON] Cron –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
}

// initializeTransferData –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
func (tcs *TransferCronService) initializeTransferData() {
	log.Println("[TRANSFER CRON] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤...")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
	var newCount int64
	var oldCount int64

	tcs.db.Table("new_transfer").Count(&newCount)
	tcs.db.Table("old_transfer").Count(&oldCount)

	if newCount == 0 && oldCount == 0 {
		log.Println("[TRANSFER CRON] –¢–∞–±–ª–∏—Ü—ã –ø—É—Å—Ç—ã–µ, –ø–∞—Ä—Å–∏–º –≤—Å–µ —Å–∞–π—Ç—ã...")
		tcs.parseAllTransferURLs()
	} else {
		log.Printf("[TRANSFER CRON] –í —Ç–∞–±–ª–∏—Ü–∞—Ö —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ: new_transfer=%d, old_transfer=%d", newCount, oldCount)
	}

	log.Println("[TRANSFER CRON] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
}

// parseAllTransferURLs –ø–∞—Ä—Å–∏—Ç –≤—Å–µ URL –ø–µ—Ä–µ–≤–æ–¥–æ–≤
func (tcs *TransferCronService) parseAllTransferURLs() {
	parser := NewTransferParser()

	// –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
	tcs.rotateTransferData()

	// –ü–∞—Ä—Å–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π URL —Å –ø–µ—Ä–µ–≤–æ–¥–Ω—ã–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏
	log.Printf("[TRANSFER CRON] –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ https://bank.uz/perevodi...")
	transfers, err := tcs.parseTransferURL("https://bank.uz/perevodi", parser)

	// –ü—Ä–æ–±—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ URL
	log.Printf("[TRANSFER CRON] –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ https://bank.uz/uz/perevodi...")
	transfers2, err2 := tcs.parseTransferURL("https://bank.uz/uz/perevodi", parser)
	if err2 == nil && len(transfers2) > 0 {
		transfers = append(transfers, transfers2...)
		log.Printf("[TRANSFER CRON] –î–æ–±–∞–≤–ª–µ–Ω–æ %d –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å –≤—Ç–æ—Ä–æ–≥–æ URL", len(transfers2))
	}
	if err != nil {
		log.Printf("[TRANSFER CRON ERROR] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ https://bank.uz/perevodi: %v", err)
	} else {
		log.Printf("[TRANSFER CRON] –ü–æ–ª—É—á–µ–Ω–æ %d –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –æ—Ç –ø–∞—Ä—Å–µ—Ä–∞", len(transfers))

		if len(transfers) > 0 {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
			savedCount := 0
			for i, transfer := range transfers {
				log.Printf("[TRANSFER CRON] –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ %d/%d: %s", i+1, len(transfers), transfer.AppName)

				if err := tcs.db.Table("new_transfer").Create(transfer).Error; err != nil {
					log.Printf("[TRANSFER CRON ERROR] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ %s: %v", transfer.AppName, err)
				} else {
					log.Printf("[TRANSFER CRON] ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–µ—Ä–µ–≤–æ–¥: %s", transfer.AppName)
					savedCount++
				}
			}
			log.Printf("[TRANSFER CRON] üìä –ò—Ç–æ–≥–æ: –ø–æ–ª—É—á–µ–Ω–æ %d, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ %d –ø–µ—Ä–µ–≤–æ–¥–æ–≤", len(transfers), savedCount)
		} else {
			log.Printf("[TRANSFER CRON] ‚ö†Ô∏è –ü–∞—Ä—Å–µ—Ä –≤–µ—Ä–Ω—É–ª 0 –ø–µ—Ä–µ–≤–æ–¥–æ–≤!")
		}
	}

	log.Println("[TRANSFER CRON] –ü–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
}

// parseTransferURL –ø–∞—Ä—Å–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π URL –ø–µ—Ä–µ–≤–æ–¥–∞
func (tcs *TransferCronService) parseTransferURL(url string, parser *TransferParser) ([]*models.Transfer, error) {
	log.Printf("[TRANSFER CRON] –ü–∞—Ä—Å–∏–Ω–≥ URL: %s", url)

	transfers, err := parser.ParseURL(url)
	if err != nil {
		log.Printf("[TRANSFER CRON ERROR] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ %s: %v", url, err)
		return nil, err
	}

	return transfers, nil
}

// rotateTransferData –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ new_transfer –≤ old_transfer
func (tcs *TransferCronService) rotateTransferData() {
	log.Println("[TRANSFER CRON] –†–æ—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤...")

	// –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
	if err := tcs.db.Exec("DELETE FROM old_transfer").Error; err != nil {
		log.Printf("[TRANSFER CRON ERROR] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ old_transfer: %v", err)
		return
	}

	// –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ new –≤ old
	if err := tcs.db.Exec(`
		INSERT INTO old_transfer (app_name, commission, limit_ru, limit_uz, created_at)
		SELECT app_name, commission, limit_ru, limit_uz, created_at 
		FROM new_transfer
	`).Error; err != nil {
		log.Printf("[TRANSFER CRON ERROR] –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ old_transfer: %v", err)
		return
	}

	// –û—á–∏—â–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
	if err := tcs.db.Exec("DELETE FROM new_transfer").Error; err != nil {
		log.Printf("[TRANSFER CRON ERROR] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ new_transfer: %v", err)
		return
	}

	log.Println("[TRANSFER CRON] –†–æ—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
}
