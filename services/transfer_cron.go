package services

import (
	"kliro/models"
	"log"
	"strings"

	"github.com/robfig/cron/v3"
	"gorm.io/gorm"
)

type TransferCronService struct {
	db *gorm.DB
}

func NewTransferCronService(db *gorm.DB) *TransferCronService {
	return &TransferCronService{db: db}
}

// StartTransferCron –∑–∞–ø—É—Å–∫–∞–µ—Ç cron –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
func StartTransferCron(db *gorm.DB) {
	log.Println("[TRANSFER CRON] üöÄ –ó–∞–ø—É—Å–∫ transfer cron...")

	service := NewTransferCronService(db)
	log.Println("[TRANSFER CRON] ‚úÖ TransferCronService —Å–æ–∑–¥–∞–Ω")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
	log.Println("[TRANSFER CRON] üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")
	service.initializeTransferData()

	// –°–æ–∑–¥–∞–µ–º cron –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
	c := cron.New(cron.WithSeconds())
	log.Println("[TRANSFER CRON] ‚úÖ Cron –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–æ–∑–¥–∞–Ω")

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 3 –¥–Ω—è –≤ 20:00
	c.AddFunc("0 0 20 */3 * *", func() {
		log.Println("[TRANSFER CRON] üïò –ü–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∫–∞–∂–¥—ã–µ 3 –¥–Ω—è...")
		service.parseAllTransferURLs()
	})
	log.Println("[TRANSFER CRON] ‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ 3 –¥–Ω—è –≤ 20:00)")

	c.Start()
	log.Println("[TRANSFER CRON] ‚úÖ Cron –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
}

// initializeTransferData –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
func (tcs *TransferCronService) initializeTransferData() {
	log.Println("[TRANSFER CRON] üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤...")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
	var newCount int64
	var oldCount int64

	err1 := tcs.db.Table("new_transfer").Count(&newCount).Error
	if err1 != nil {
		log.Printf("[TRANSFER CRON] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ new_transfer: %v", err1)
	}

	err2 := tcs.db.Table("old_transfer").Count(&oldCount).Error
	if err2 != nil {
		log.Printf("[TRANSFER CRON] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ old_transfer: %v", err2)
	}

	log.Printf("[TRANSFER CRON] üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü: new_transfer=%d, old_transfer=%d", newCount, oldCount)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ
	if newCount == 0 && oldCount == 0 {
		log.Println("[TRANSFER CRON] ‚úÖ –¢–∞–±–ª–∏—Ü—ã –ø—É—Å—Ç—ã–µ, –Ω–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...")
		tcs.parseAllTransferURLs()
	} else {
		log.Printf("[TRANSFER CRON] ‚ÑπÔ∏è –í —Ç–∞–±–ª–∏—Ü–∞—Ö —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ: new_transfer=%d, old_transfer=%d", newCount, oldCount)
		log.Printf("[TRANSFER CRON] ‚ÑπÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ù–ï —Ç—Ä–µ–±—É–µ—Ç—Å—è, –∂–¥–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–∫–∞–∂–¥—ã–µ 3 –¥–Ω—è –≤ 20:00)")
	}

	log.Println("[TRANSFER CRON] ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
}

// parseAllTransferURLs –ø–∞—Ä—Å–∏—Ç –≤—Å–µ URL –ø–µ—Ä–µ–≤–æ–¥–æ–≤
func (tcs *TransferCronService) parseAllTransferURLs() {
	log.Println("[TRANSFER CRON] üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö URL –ø–µ—Ä–µ–≤–æ–¥–æ–≤...")

	parser := NewTransferParser()
	log.Println("[TRANSFER CRON] ‚úÖ –ü–∞—Ä—Å–µ—Ä —Å–æ–∑–¥–∞–Ω")

	// –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
	log.Println("[TRANSFER CRON] üîÑ –†–æ—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")
	tcs.rotateTransferData()

	// –ü–∞—Ä—Å–∏–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π URL —Å –ø–µ—Ä–µ–≤–æ–¥–Ω—ã–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏
	log.Printf("[TRANSFER CRON] üåê –ü–∞—Ä—Å–∏–Ω–≥ https://bank.uz/perevodi...")
	transfers, err := tcs.parseTransferURL("https://bank.uz/perevodi", parser)

	if err != nil {
		log.Printf("[TRANSFER CRON] ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ https://bank.uz/perevodi: %v", err)
	} else {
		log.Printf("[TRANSFER CRON] üìä –ü–æ–ª—É—á–µ–Ω–æ %d –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –æ—Ç –ø–∞—Ä—Å–µ—Ä–∞", len(transfers))

		if len(transfers) > 0 {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
			savedCount := 0
			seenNames := make(map[string]bool)

			for _, transfer := range transfers {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
				normalizedName := strings.ToLower(strings.TrimSpace(transfer.AppName))
				if seenNames[normalizedName] {
					continue
				}

				if err := tcs.db.Table("new_transfer").Create(transfer).Error; err != nil {
					log.Printf("[TRANSFER CRON] ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ %s: %v", transfer.AppName, err)
				} else {
					savedCount++
					seenNames[normalizedName] = true
				}
			}
			log.Printf("[TRANSFER CRON] üìä –ò—Ç–æ–≥–æ: –ø–æ–ª—É—á–µ–Ω–æ %d, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ %d –ø–µ—Ä–µ–≤–æ–¥–æ–≤", len(transfers), savedCount)
		} else {
			log.Printf("[TRANSFER CRON] ‚ö†Ô∏è –ü–∞—Ä—Å–µ—Ä –≤–µ—Ä–Ω—É–ª 0 –ø–µ—Ä–µ–≤–æ–¥–æ–≤!")
		}
	}

	log.Println("[TRANSFER CRON] ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
}

// parseTransferURL –ø–∞—Ä—Å–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π URL –ø–µ—Ä–µ–≤–æ–¥–∞
func (tcs *TransferCronService) parseTransferURL(url string, parser *TransferParser) ([]*models.Transfer, error) {
	log.Printf("[TRANSFER CRON] üåê –ü–∞—Ä—Å–∏–Ω–≥ URL: %s", url)

	transfers, err := parser.ParseURL(url)
	if err != nil {
		log.Printf("[TRANSFER CRON] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ %s: %v", url, err)
		return nil, err
	}

	log.Printf("[TRANSFER CRON] ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–∏–ª–∏ %d –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å %s", len(transfers), url)
	return transfers, nil
}

// rotateTransferData –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ new_transfer –≤ old_transfer
func (tcs *TransferCronService) rotateTransferData() {
	log.Println("[TRANSFER CRON] üîÑ –†–æ—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤...")

	// –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
	if err := tcs.db.Exec("DELETE FROM old_transfer").Error; err != nil {
		log.Printf("[TRANSFER CRON] ‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ old_transfer: %v", err)
		return
	}
	log.Println("[TRANSFER CRON] ‚úÖ old_transfer –æ—á–∏—â–µ–Ω–∞")

	// –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ new –≤ old
	if err := tcs.db.Exec(`
		INSERT INTO old_transfer (app_name, commission, limit_ru, limit_uz, created_at)
		SELECT app_name, commission, limit_ru, limit_uz, created_at
		FROM new_transfer
	`).Error; err != nil {
		log.Printf("[TRANSFER CRON] ‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ old_transfer: %v", err)
		return
	}
	log.Println("[TRANSFER CRON] ‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ old_transfer")

	// –û—á–∏—â–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
	if err := tcs.db.Exec("DELETE FROM new_transfer").Error; err != nil {
		log.Printf("[TRANSFER CRON] ‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ new_transfer: %v", err)
		return
	}
	log.Println("[TRANSFER CRON] ‚úÖ new_transfer –æ—á–∏—â–µ–Ω–∞")

	log.Println("[TRANSFER CRON] ‚úÖ –†–æ—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
}
