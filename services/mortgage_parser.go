package services

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"kliro/models"
	"log"
	"net/http"
	"os"
	"regexp"
	"strings"
	"time"

	"github.com/PuerkitoBio/goquery"
)

type MortgageParser struct{}

func NewMortgageParser() *MortgageParser {
	return &MortgageParser{}
}

func (mp *MortgageParser) ParseURL(url string) (*models.Mortgage, error) {
	log.Printf("[MORTGAGE PARSER] üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ URL: %s", url)

	// –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	log.Printf("[MORTGAGE PARSER] üåê –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
	httpClient := &http.Client{
		Timeout: 15 * time.Second,
	}
	resp, err := httpClient.Get(url)
	if err != nil {
		log.Printf("[MORTGAGE PARSER] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: %v", err)
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: %v", err)
	}
	defer resp.Body.Close()

	log.Printf("[MORTGAGE PARSER] üì° –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã: %d", resp.StatusCode)

	doc, err := goquery.NewDocumentFromReader(resp.Body)
	if err != nil {
		log.Printf("[MORTGAGE PARSER] ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML: %v", err)
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML: %v", err)
	}

	// –ë–µ—Ä–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	text := doc.Find("body").Text()
	log.Printf("[MORTGAGE PARSER] üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: %d —Å–∏–º–≤–æ–ª–æ–≤", len(text))

	// –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–µ–≥–æ
	text = mp.cleanText(text)

	log.Printf("[MORTGAGE PARSER] –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è %s (–ø–µ—Ä–≤—ã–µ 5000 —Å–∏–º–≤–æ–ª–æ–≤):", url)
	log.Printf(text[:min(len(text), 5000)])
	log.Printf("[MORTGAGE PARSER] üìè –û–±—â–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: %d —Å–∏–º–≤–æ–ª–æ–≤", len(text))

	// –ü—Ä–æ–º–ø—Ç –¥–ª—è DeepSeek
	prompt := fmt.Sprintf(`–ò–∑–≤–ª–µ–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–ø–æ—Ç–µ—á–Ω–æ–º –∫—Ä–µ–¥–∏—Ç–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –≤–µ—Ä–Ω–∏ JSON –æ–±—ä–µ–∫—Ç.

–û–±—ä–µ–∫—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
bank_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞
rate_max: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 15.5)
rate_min: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 12.0)
term_years: —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ –≤ –≥–æ–¥–∞—Ö (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 20)
max_amount: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞ (—á–∏—Å–ª–æ –≤ –º–∏–ª–ª–∏–æ–Ω–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä 500)
initial_payment: –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 20)

–ï—Å–ª–∏ –∫–∞–∫–æ–µ-—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π null.

–¢–µ–∫—Å—Ç: "%s"
–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON –æ–±—ä–µ–∫—Ç.`, text)

	// –í—ã–∑—ã–≤–∞–µ–º DeepSeek API
	reqBody := DeepSeekRequest{
		Model:       "deepseek-chat",
		Messages:    []Message{{Role: "user", Content: prompt}},
		MaxTokens:   4096,
		Temperature: 0.0,
	}

	jsonBody, _ := json.Marshal(reqBody)
	req, _ := http.NewRequest("POST", "https://api.deepseek.com/v1/chat/completions", bytes.NewBuffer(jsonBody))
	req.Header.Set("Content-Type", "application/json")

	apiKey := os.Getenv("DEEPSEEK_API_KEY")
	if apiKey == "" {
		log.Printf("[MORTGAGE PARSER] ‚ùå DEEPSEEK_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
		return nil, fmt.Errorf("DeepSeek API key not set")
	}
	log.Printf("[MORTGAGE PARSER] ‚úÖ DEEPSEEK_API_KEY –Ω–∞–π–¥–µ–Ω (–¥–ª–∏–Ω–∞: %d)", len(apiKey))

	req.Header.Set("Authorization", "Bearer "+apiKey)

	log.Printf("[MORTGAGE PARSER] üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ DeepSeek API...")
	client := &http.Client{
		Timeout: 30 * time.Second,
	}
	dsResp, err := client.Do(req)
	if err != nil {
		log.Printf("[MORTGAGE PARSER] ‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ DeepSeek: %v", err)
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ DeepSeek API: %v", err)
	}
	defer dsResp.Body.Close()

	log.Printf("[MORTGAGE PARSER] üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ DeepSeek: %d", dsResp.StatusCode)

	body, _ := ioutil.ReadAll(dsResp.Body)
	log.Printf("[MORTGAGE PARSER] üìÑ –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ DeepSeek: %d –±–∞–π—Ç", len(body))

	if dsResp.StatusCode != 200 {
		log.Printf("[MORTGAGE PARSER] ‚ùå –û—à–∏–±–∫–∞ DeepSeek API (—Å—Ç–∞—Ç—É—Å %d): %s", dsResp.StatusCode, string(body))
		return nil, fmt.Errorf("DeepSeek API error (status %d): %s", dsResp.StatusCode, string(body))
	}

	var deepSeekResponse DeepSeekResponse
	if err := json.Unmarshal(body, &deepSeekResponse); err != nil {
		log.Printf("[MORTGAGE PARSER] ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞ DeepSeek: %v", err)
		log.Printf("[MORTGAGE PARSER] üìÑ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: %s", string(body))
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ DeepSeek: %v", err)
	}

	log.Printf("[MORTGAGE PARSER] üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ choices –≤ –æ—Ç–≤–µ—Ç–µ: %d", len(deepSeekResponse.Choices))

	if len(deepSeekResponse.Choices) > 0 {
		raw := deepSeekResponse.Choices[0].Message.Content
		raw = strings.TrimSpace(raw)
		raw = strings.TrimPrefix(raw, "```json")
		raw = strings.TrimPrefix(raw, "```")
		raw = strings.TrimSuffix(raw, "```")
		raw = strings.TrimSpace(raw)

		log.Printf("[MORTGAGE PARSER] DeepSeek –æ—Ç–≤–µ—Ç –¥–ª—è %s: %s", url, raw)
		log.Printf("[MORTGAGE PARSER] üìÑ –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ DeepSeek: %d —Å–∏–º–≤–æ–ª–æ–≤", len(raw))

		var mortgage models.Mortgage
		if err := json.Unmarshal([]byte(raw), &mortgage); err != nil {
			log.Printf("[MORTGAGE PARSER ERROR] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è %s: %v, raw: %s", url, err, raw)
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
		}

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ URL
		mortgage.CreatedAt = time.Now()
		mortgage.URL = url

		// –£–ª—É—á—à–∞–µ–º –¥–∞–Ω–Ω—ã–µ
		mp.improveMortgageData(&mortgage)

		log.Printf("[MORTGAGE PARSER] ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–∏–ª–∏ –∏–ø–æ—Ç–µ–∫—É: %s (—Å—Ç–∞–≤–∫–∞: %.1f%%-%.1f%%)", mortgage.BankName, mortgage.RateMin, mortgage.RateMax)

		return &mortgage, nil
	}

	return nil, fmt.Errorf("–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç DeepSeek")
}

func (mp *MortgageParser) cleanText(raw string) string {
	// –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
	reTag := regexp.MustCompile(`<[^>]+>`)
	clean := reTag.ReplaceAllString(raw, "")

	// –£–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏ —Å—Ç–∏–ª–∏
	reScript := regexp.MustCompile(`<script[^>]*>.*?</script>`)
	reStyle := regexp.MustCompile(`<style[^>]*>.*?</style>`)
	clean = reScript.ReplaceAllString(clean, "")
	clean = reStyle.ReplaceAllString(clean, "")

	// –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
	reSpaces := regexp.MustCompile(`\s+`)
	clean = reSpaces.ReplaceAllString(clean, " ")
	clean = strings.TrimSpace(clean)

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
	if len(clean) > 8000 {
		clean = clean[:8000]
	}

	return clean
}

func (mp *MortgageParser) improveMortgageData(mortgage *models.Mortgage) {
	// –£–ª—É—á—à–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞
	mortgage.BankName = mp.cleanBankName(mortgage.BankName)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞–≤–∫–∏
	if mortgage.RateMin > mortgage.RateMax {
		mortgage.RateMin, mortgage.RateMax = mortgage.RateMax, mortgage.RateMin
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
	if mortgage.RateMin < 0 {
		mortgage.RateMin = 0
	}
	if mortgage.RateMax > 50 {
		mortgage.RateMax = 50
	}
	if mortgage.TermYears < 1 {
		mortgage.TermYears = 1
	}
	if mortgage.TermYears > 30 {
		mortgage.TermYears = 30
	}
	if mortgage.InitialPayment < 0 {
		mortgage.InitialPayment = 0
	}
	if mortgage.InitialPayment > 100 {
		mortgage.InitialPayment = 100
	}
}

func (mp *MortgageParser) cleanBankName(name string) string {
	// –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
	cleaned := strings.TrimSpace(name)

	// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
	nameMap := map[string]string{
		"Anorbank":    "Anor Bank",
		"Asakabank":   "Asaka Bank",
		"Hamkorbank":  "Hamkor Bank",
		"Ipotekabank": "Ipoteka Bank",
		"Milliybank":  "Milliy Bank",
		"Sqbbank":     "SQB Bank",
		"Turonbank":   "Turon Bank",
		"Xalqbank":    "Xalq Bank",
		"Agrobank":    "Agro Bank",
		"Aloqabank":   "Aloqa Bank",
	}

	if corrected, exists := nameMap[cleaned]; exists {
		return corrected
	}

	return cleaned
}
