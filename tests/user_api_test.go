package tests

import (
	"bytes"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"

	"kliro/routes"

	"log"
	"os"

	"github.com/joho/godotenv"
	"github.com/stretchr/testify/assert"
)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ .env –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏
func TestMain(m *testing.M) {
	err := godotenv.Load()
	if err != nil {
		log.Println("No .env file found, using environment variables")
	}
	os.Exit(m.Run())
}

// 1Ô∏è‚É£ –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ email
func TestRegisterEmail(t *testing.T) {
	r := routes.SetupRouter()
	w := httptest.NewRecorder()
	body := map[string]string{"email": "ibrokhimov3210@gmail.com"}
	jsonBody, _ := json.Marshal(body)
	req, _ := http.NewRequest("POST", "/register", bytes.NewBuffer(jsonBody))
	req.Header.Set("Content-Type", "application/json")
	r.ServeHTTP(w, req)
	assert.Equal(t, 200, w.Code) // –∏–ª–∏ –¥—Ä—É–≥–æ–π –æ–∂–∏–¥–∞–µ–º—ã–π –∫–æ–¥
	assert.Contains(t, w.Body.String(), "otp sent")
}

// 2Ô∏è‚É£ –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
func TestRegisterPhone(t *testing.T) {
	r := routes.SetupRouter()
	w := httptest.NewRecorder()
	body := map[string]string{"phone": "+9983311108810"}
	jsonBody, _ := json.Marshal(body)
	req, _ := http.NewRequest("POST", "/register", bytes.NewBuffer(jsonBody))
	req.Header.Set("Content-Type", "application/json")
	r.ServeHTTP(w, req)
	assert.Equal(t, 200, w.Code)
	assert.Contains(t, w.Body.String(), "otp sent")
}

// 3Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è OTP (email)
func TestConfirmOTPEmail(t *testing.T) {
	// –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π OTP –∏–∑ Redis –∏–ª–∏ –º–æ–∫–∞—Ç—å Redis
	// –ó–¥–µ—Å—å –ø—Ä–∏–º–µ—Ä —Å –Ω–µ–≤–µ—Ä–Ω—ã–º OTP (–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π)
	r := routes.SetupRouter()
	w := httptest.NewRecorder()
	body := map[string]string{"email": "ibrokhimov3210@gmail.com", "otp": "wrong"}
	jsonBody, _ := json.Marshal(body)
	req, _ := http.NewRequest("POST", "/confirm-otp", bytes.NewBuffer(jsonBody))
	req.Header.Set("Content-Type", "application/json")
	r.ServeHTTP(w, req)
	assert.Equal(t, 400, w.Code)
	assert.Contains(t, w.Body.String(), "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç—ë–∫—à–∏–π –∫–æ–¥")
}

// 4Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è OTP (—Ç–µ–ª–µ—Ñ–æ–Ω)
func TestConfirmOTPPhone(t *testing.T) {
	r := routes.SetupRouter()
	w := httptest.NewRecorder()
	body := map[string]string{"phone": "+9983311108810", "otp": "wrong"}
	jsonBody, _ := json.Marshal(body)
	req, _ := http.NewRequest("POST", "/confirm-otp", bytes.NewBuffer(jsonBody))
	req.Header.Set("Content-Type", "application/json")
	r.ServeHTTP(w, req)
	assert.Equal(t, 400, w.Code)
	assert.Contains(t, w.Body.String(), "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç—ë–∫—à–∏–π –∫–æ–¥")
}

// 5Ô∏è‚É£ –¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è (email)
func TestSetRegionPasswordEmail(t *testing.T) {
	r := routes.SetupRouter()
	w := httptest.NewRecorder()
	body := map[string]interface{}{"email": "ibrokhimov3210@gmail.com", "region_id": 1, "password": "testpass123"}
	jsonBody, _ := json.Marshal(body)
	req, _ := http.NewRequest("POST", "/set-region-password-final", bytes.NewBuffer(jsonBody))
	req.Header.Set("Content-Type", "application/json")
	r.ServeHTTP(w, req)
	// –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ OTP –Ω–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω
	assert.NotEqual(t, 200, w.Code)
}

// 6Ô∏è‚É£ –¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è (—Ç–µ–ª–µ—Ñ–æ–Ω)
func TestSetRegionPasswordPhone(t *testing.T) {
	r := routes.SetupRouter()
	w := httptest.NewRecorder()
	body := map[string]interface{}{"phone": "+9983311108810", "region_id": 1, "password": "testpass123"}
	jsonBody, _ := json.Marshal(body)
	req, _ := http.NewRequest("POST", "/set-region-password-final", bytes.NewBuffer(jsonBody))
	req.Header.Set("Content-Type", "application/json")
	r.ServeHTTP(w, req)
	// –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ OTP –Ω–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω
	assert.NotEqual(t, 200, w.Code)
}

// 7Ô∏è‚É£ –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –ø–æ email
func TestLoginEmail(t *testing.T) {
	r := routes.SetupRouter()
	w := httptest.NewRecorder()
	body := map[string]string{"email": "ibrokhimov3210@gmail.com", "password": "testpass123"}
	jsonBody, _ := json.Marshal(body)
	req, _ := http.NewRequest("POST", "/login", bytes.NewBuffer(jsonBody))
	req.Header.Set("Content-Type", "application/json")
	r.ServeHTTP(w, req)
	assert.True(t, w.Code == 200 || w.Code == 401)
}

// 8Ô∏è‚É£ –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
func TestLoginPhone(t *testing.T) {
	r := routes.SetupRouter()
	w := httptest.NewRecorder()
	body := map[string]string{"phone": "+9983311108810", "password": "testpass123"}
	jsonBody, _ := json.Marshal(body)
	req, _ := http.NewRequest("POST", "/login", bytes.NewBuffer(jsonBody))
	req.Header.Set("Content-Type", "application/json")
	r.ServeHTTP(w, req)
	assert.True(t, w.Code == 200 || w.Code == 401)
}

// 9Ô∏è‚É£ –¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –ø–æ email
func TestForgotPasswordEmail(t *testing.T) {
	r := routes.SetupRouter()
	w := httptest.NewRecorder()
	body := map[string]string{"email": "ibrokhimov3210@gmail.com"}
	jsonBody, _ := json.Marshal(body)
	req, _ := http.NewRequest("POST", "/forgot-password", bytes.NewBuffer(jsonBody))
	req.Header.Set("Content-Type", "application/json")
	r.ServeHTTP(w, req)
	assert.Equal(t, 200, w.Code)
	assert.Contains(t, w.Body.String(), "otp sent")
}

// üîü –¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
func TestForgotPasswordPhone(t *testing.T) {
	r := routes.SetupRouter()
	w := httptest.NewRecorder()
	body := map[string]string{"phone": "+9983311108810"}
	jsonBody, _ := json.Marshal(body)
	req, _ := http.NewRequest("POST", "/forgot-password", bytes.NewBuffer(jsonBody))
	req.Header.Set("Content-Type", "application/json")
	r.ServeHTTP(w, req)
	assert.Equal(t, 200, w.Code)
	assert.Contains(t, w.Body.String(), "otp sent")
}

// 1Ô∏è‚É£1Ô∏è‚É£ –¢–µ—Å—Ç —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –ø–æ email
func TestResetPasswordEmail(t *testing.T) {
	r := routes.SetupRouter()
	w := httptest.NewRecorder()
	body := map[string]string{"email": "ibrokhimov3210@gmail.com", "otp": "wrong", "password": "newpass321"}
	jsonBody, _ := json.Marshal(body)
	req, _ := http.NewRequest("POST", "/reset-password", bytes.NewBuffer(jsonBody))
	req.Header.Set("Content-Type", "application/json")
	r.ServeHTTP(w, req)
	assert.NotEqual(t, 200, w.Code)
}

// 1Ô∏è‚É£2Ô∏è‚É£ –¢–µ—Å—Ç —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
func TestResetPasswordPhone(t *testing.T) {
	r := routes.SetupRouter()
	w := httptest.NewRecorder()
	body := map[string]string{"phone": "+9983311108810", "otp": "wrong", "password": "newpass321"}
	jsonBody, _ := json.Marshal(body)
	req, _ := http.NewRequest("POST", "/reset-password", bytes.NewBuffer(jsonBody))
	req.Header.Set("Content-Type", "application/json")
	r.ServeHTTP(w, req)
	assert.NotEqual(t, 200, w.Code)
}

// 1Ô∏è‚É£3Ô∏è‚É£ –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º (email)
func TestLoginWithNewPasswordEmail(t *testing.T) {
	r := routes.SetupRouter()
	w := httptest.NewRecorder()
	body := map[string]string{"email": "ibrokhimov3210@gmail.com", "password": "newpass321"}
	jsonBody, _ := json.Marshal(body)
	req, _ := http.NewRequest("POST", "/login", bytes.NewBuffer(jsonBody))
	req.Header.Set("Content-Type", "application/json")
	r.ServeHTTP(w, req)
	assert.True(t, w.Code == 200 || w.Code == 401)
}

// 1Ô∏è‚É£4Ô∏è‚É£ –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º (—Ç–µ–ª–µ—Ñ–æ–Ω)
func TestLoginWithNewPasswordPhone(t *testing.T) {
	r := routes.SetupRouter()
	w := httptest.NewRecorder()
	body := map[string]string{"phone": "+9983311108810", "password": "newpass321"}
	jsonBody, _ := json.Marshal(body)
	req, _ := http.NewRequest("POST", "/login", bytes.NewBuffer(jsonBody))
	req.Header.Set("Content-Type", "application/json")
	r.ServeHTTP(w, req)
	assert.True(t, w.Code == 200 || w.Code == 401)
}

// 1Ô∏è‚É£5Ô∏è‚É£ –¢–µ—Å—Ç Google OAuth (–∑–∞–≥–ª—É—à–∫–∞)
func TestGoogleOAuth(t *testing.T) {
	// –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –Ω—É–∂–µ–Ω –º–æ–∫ Google OAuth flow
	// –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ—É—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	r := routes.SetupRouter()
	w := httptest.NewRecorder()
	req, _ := http.NewRequest("GET", "/auth/google", nil)
	r.ServeHTTP(w, req)
	assert.True(t, w.Code == 302 || w.Code == 200)
}
